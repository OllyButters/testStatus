<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="ds.asCharacter::smk" timestamp="2019-08-01 10:15:08" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.asCharacter::smk::turn the factor variable 'GENDER' into a character vector" timestamp="2019-08-01 10:15:14" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="1" time="6.55">
    <testcase time="6.55" classname="ds.asCharacter_smk_turn_the_factor_variable_GENDER_into_a_character_vector" name="_unnamed_">
      <error type="error" message="Command 'testObjExistsDS(&quot;gender_as_char&quot;)' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: testObjExistsDS (@test-smk-ds.asCharacter.R#27)">Command 'testObjExistsDS("gender_as_char")' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: testObjExistsDS
1: ds.asCharacter(x = "D$GENDER", newobj = "gender_as_char") at /home/vsts/work/1/s/tests/testthat/test-smk-ds.asCharacter.R:27
2: opal::datashield.aggregate(datasources, calltext) at /home/vsts/work/1/s/R/ds.asCharacter.R:67
3: datashield.aggregate.list(datasources, calltext)
4: datashield.command_result(opal, res, wait = TRUE)
5: datashield.command_result.list(opal, res, wait = TRUE)
6: lapply(1:length(opal), function(i) {
       datashield.command_result(opal[[i]], id[[i]], wait = wait)
   })
7: FUN(X[[i]], ...)
8: datashield.command_result(opal[[i]], id[[i]], wait = wait)
9: datashield.command_result.opal(opal[[i]], id[[i]], wait = wait)
10: stop("Command '", cmd$script, "' failed on '", opal$name, "': ", msg, call. = FALSE)</error>
    </testcase>
  </testsuite>
  <testsuite name="ds.asList::smk" timestamp="2019-08-01 10:15:15" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.asList::smk::turn the data frame D into a list" timestamp="2019-08-01 10:15:21" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="1" time="6.25">
    <testcase time="6.25" classname="ds.asList_smk_turn_the_data_frame_D_into_a_list" name="_unnamed_">
      <error type="error" message="Command 'asListDS(&quot;D&quot;, &quot;D.list&quot;)' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: asListDS (@test-smk-ds.asList.R#27)">Command 'asListDS("D", "D.list")' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: asListDS
1: ds.asList(x = "D") at /home/vsts/work/1/s/tests/testthat/test-smk-ds.asList.R:27
2: opal::datashield.aggregate(datasources, calltext) at /home/vsts/work/1/s/R/ds.asList.R:53
3: datashield.aggregate.list(datasources, calltext)
4: datashield.command_result(opal, res, wait = TRUE)
5: datashield.command_result.list(opal, res, wait = TRUE)
6: lapply(1:length(opal), function(i) {
       datashield.command_result(opal[[i]], id[[i]], wait = wait)
   })
7: FUN(X[[i]], ...)
8: datashield.command_result(opal[[i]], id[[i]], wait = wait)
9: datashield.command_result.opal(opal[[i]], id[[i]], wait = wait)
10: stop("Command '", cmd$script, "' failed on '", opal$name, "': ", msg, call. = FALSE)</error>
    </testcase>
  </testsuite>
  <testsuite name="ds.assign::smk" timestamp="2019-08-01 10:15:21" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.assign::smk" timestamp="2019-08-01 10:15:27" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="0" time="6.74">
    <testcase time="6.74" classname="ds.assign_smk" name="test_assign"/>
  </testsuite>
  <testsuite name="ds.dataframe::smk" timestamp="2019-08-01 10:15:28" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.dataframe::smk::create a dataframe" timestamp="2019-08-01 10:15:34" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="1" time="7.06">
    <testcase time="7.06" classname="ds.dataframe_smk_create_a_dataframe" name="_unnamed_">
      <error type="error" message="Command 'testObjExistsDS(&quot;df_new&quot;)' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: testObjExistsDS (@test-smk-ds.dataframe.R#18)">Command 'testObjExistsDS("df_new")' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: testObjExistsDS
1: ds.dataframe(x = myvectors) at /home/vsts/work/1/s/tests/testthat/test-smk-ds.dataframe.R:18
2: opal::datashield.aggregate(datasources, calltext) at /home/vsts/work/1/s/R/ds.dataframe.R:221
3: datashield.aggregate.list(datasources, calltext)
4: datashield.command_result(opal, res, wait = TRUE)
5: datashield.command_result.list(opal, res, wait = TRUE)
6: lapply(1:length(opal), function(i) {
       datashield.command_result(opal[[i]], id[[i]], wait = wait)
   })
7: FUN(X[[i]], ...)
8: datashield.command_result(opal[[i]], id[[i]], wait = wait)
9: datashield.command_result.opal(opal[[i]], id[[i]], wait = wait)
10: stop("Command '", cmd$script, "' failed on '", opal$name, "': ", msg, call. = FALSE)</error>
    </testcase>
  </testsuite>
  <testsuite name="ds.dim:smk" timestamp="2019-08-01 10:15:35" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.dim::smk" timestamp="2019-08-01 10:15:41" hostname="fv-az670" tests="4" skipped="0" failures="4" errors="0" time="7.25">
    <testcase time="6.44" classname="ds.dim_smk" name="test_dim">
      <failure type="failure" message="ds.dim(x = &quot;D&quot;)$sim1 not equal to c(2163, 11). (@test-smk-ds.dim.R#19)">ds.dim(x = "D")$sim1 not equal to c(2163, 11).
target is NULL, current is numeric</failure>
    </testcase>
    <testcase time="0.29" classname="ds.dim_smk" name="test_dim">
      <failure type="failure" message="ds.dim(x = &quot;D&quot;)$sim2 not equal to c(3088, 11). (@test-smk-ds.dim.R#20)">ds.dim(x = "D")$sim2 not equal to c(3088, 11).
target is NULL, current is numeric</failure>
    </testcase>
    <testcase time="0.27" classname="ds.dim_smk" name="test_dim">
      <failure type="failure" message="ds.dim(x = &quot;D&quot;)$sim3 not equal to c(4128, 11). (@test-smk-ds.dim.R#21)">ds.dim(x = "D")$sim3 not equal to c(4128, 11).
target is NULL, current is numeric</failure>
    </testcase>
    <testcase time="0.25" classname="ds.dim_smk" name="test_dim">
      <failure type="failure" message="ds.dim(x = &quot;D&quot;, type = &quot;combine&quot;)$pooled.dimension not equal to c(9379, 11). (@test-smk-ds.dim.R#22)">ds.dim(x = "D", type = "combine")$pooled.dimension not equal to c(9379, 11).
target is NULL, current is numeric</failure>
    </testcase>
  </testsuite>
  <testsuite name="ds.dim::smk::errors" timestamp="2019-08-01 10:15:42" hostname="fv-az670" tests="3" skipped="0" failures="2" errors="0" time="0.53">
    <testcase time="0.01" classname="ds.dim_smk_errors" name="dim_errors"/>
    <testcase time="0.26" classname="ds.dim_smk_errors" name="dim_errors">
      <failure type="failure" message="`ds.dim(x = &quot;D$LAB_TSC&quot;)` did not throw an error. (@test-smk-ds.dim.R#29)">`ds.dim(x = "D$LAB_TSC")` did not throw an error.</failure>
    </testcase>
    <testcase time="0.26" classname="ds.dim_smk_errors" name="dim_errors">
      <failure type="failure" message="`ds.dim(x = &quot;D&quot;, type = &quot;datashield&quot;)` threw an error with unexpected message. (@test-smk-ds.dim.R#30)">`ds.dim(x = "D", type = "datashield")` threw an error with unexpected message.
Expected match: "Function argument \"type\" has to be either \"combine\" or \"split\""
Actual message: "Function argument \"type\" has to be either \"both\", \"combine\" or \"split\""</failure>
    </testcase>
  </testsuite>
  <testsuite name="ds.isNA::smk" timestamp="2019-08-01 10:15:43" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.isNA::smk" timestamp="2019-08-01 10:15:49" hostname="fv-az670" tests="3" skipped="0" failures="0" errors="0" time="7.25">
    <testcase time="7.25" classname="ds.isNA_smk" name="isNA"/>
    <testcase time="0" classname="ds.isNA_smk" name="isNA"/>
    <testcase time="0" classname="ds.isNA_smk" name="isNA"/>
  </testsuite>
  <testsuite name="ds.isNA()::smk::errors" timestamp="2019-08-01 10:15:50" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="0" time="0.02">
    <testcase time="0.02" classname="ds.isNA_smk_errors" name="isNA_errors"/>
  </testsuite>
  <testsuite name="ds.length::smk" timestamp="2019-08-01 10:15:50" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.length::smk" timestamp="2019-08-01 10:15:56" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="1" time="6.15">
    <testcase time="6.15" classname="ds.length_smk" name="test_length">
      <error type="error" message="Command 'lengthDS(D$LAB_TSC)' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: lengthDS (@test-smk-ds.length.R#18)">Command 'lengthDS(D$LAB_TSC)' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: lengthDS
1: expect_equal(ds.length(x = "D$LAB_TSC")$total.number.of.observations, 9379) at /home/vsts/work/1/s/tests/testthat/test-smk-ds.length.R:18
2: quasi_label(enquo(object), label, arg = "object")
3: eval_bare(get_expr(quo), get_env(quo))
4: ds.length(x = "D$LAB_TSC")
5: opal::datashield.aggregate(datasources, as.symbol(cally)) at /home/vsts/work/1/s/R/ds.length.R:107
6: datashield.aggregate.list(datasources, as.symbol(cally))
7: datashield.command_result(opal, res, wait = TRUE)
8: datashield.command_result.list(opal, res, wait = TRUE)
9: lapply(1:length(opal), function(i) {
       datashield.command_result(opal[[i]], id[[i]], wait = wait)
   })
10: FUN(X[[i]], ...)
11: datashield.command_result(opal[[i]], id[[i]], wait = wait)
12: datashield.command_result.opal(opal[[i]], id[[i]], wait = wait)
13: stop("Command '", cmd$script, "' failed on '", opal$name, "': ", msg, call. = FALSE)</error>
    </testcase>
  </testsuite>
  <testsuite name="ds.length::smk::errors" timestamp="2019-08-01 10:15:56" hostname="fv-az670" tests="3" skipped="0" failures="2" errors="0" time="0.24">
    <testcase time="0.05" classname="ds.length_smk_errors" name="length_errors"/>
    <testcase time="0.19" classname="ds.length_smk_errors" name="length_errors">
      <failure type="failure" message="`ds.length(x = &quot;D&quot;)` threw an error with unexpected message. (@test-smk-ds.length.R#27)">`ds.length(x = "D")` threw an error with unexpected message.
Expected match: "The input object must be a character, factor, integer, logical or numeric vector or a list."
Actual message: "Command 'lengthDS(D)' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: lengthDS"</failure>
    </testcase>
    <testcase time="0" classname="ds.length_smk_errors" name="length_errors">
      <failure type="failure" message="`ds.length(x = &quot;D$LAB_TSC&quot;, type = &quot;datashield&quot;)` threw an error with unexpected message. (@test-smk-ds.length.R#28)">`ds.length(x = "D$LAB_TSC", type = "datashield")` threw an error with unexpected message.
Expected match: "Function argument \"type\" has to be either \"combine\" or \"split\""
Actual message: "Function argument \"type\" has to be either \"both\", \"combine\" or \"split\""</failure>
    </testcase>
  </testsuite>
  <testsuite name="ds.list::smk" timestamp="2019-08-01 10:15:56" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.list::smk" timestamp="2019-08-01 10:16:03" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="0" time="8.22">
    <testcase time="8.22" classname="ds.list_smk" name="Is_List"/>
  </testsuite>
  <testsuite name="ds.list::smk::test errors" timestamp="2019-08-01 10:16:05" hostname="fv-az670" tests="2" skipped="0" failures="0" errors="0" time="0.02">
    <testcase time="0.02" classname="ds.list_smk_test_errors" name="list_erros"/>
    <testcase time="0" classname="ds.list_smk_test_errors" name="list_erros"/>
  </testsuite>
  <testsuite name="ds.meanByClass::smk" timestamp="2019-08-01 10:16:05" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.meanByClass::smk::calculate the mean proportion for LAB_HDL across gender categories" timestamp="2019-08-01 10:16:11" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="1" time="10.69">
    <testcase time="10.69" classname="ds.meanByClass_smk_calculate_the_mean_proportion_for_LAB_HDL_across_gender_categories" name="_unnamed_">
      <error type="error" message="non-numeric argument to binary operator (@test-smk-ds.meanByClass.R#27)">non-numeric argument to binary operator
1: ds.meanByClass(x = "D", outvar = "LAB_HDL", covar = "GENDER") at /home/vsts/work/1/s/tests/testthat/test-smk-ds.meanByClass.R:27
2: meanByClassHelper0b(x, outvar, covar, type, datasources) at /home/vsts/work/1/s/R/ds.meanByClass.R:90
3: meanByClassHelper2(datasources, subsetnames, outvar, invalidrecorder) at /home/vsts/work/1/s/R/meanByClassHelper0b.R:73
4: getPooledMean(dtsources, paste0(tablename, "$", variables[z])) at /home/vsts/work/1/s/R/meanByClassHelper2.R:71</error>
    </testcase>
  </testsuite>
  <testsuite name="ds.mean::smk" timestamp="2019-08-01 10:16:15" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.mean::smk::(type=combine)" timestamp="2019-08-01 10:16:21" hostname="fv-az670" tests="2" skipped="0" failures="1" errors="1" time="6.25">
    <testcase time="6.25" classname="ds.mean_smk_type_combine_" name="mean_values_combine_">
      <failure type="failure" message="is.na(stat.mean) isn't false. (@test-smk-ds.mean.R#31)">is.na(stat.mean) isn't false.</failure>
    </testcase>
    <testcase time="0" classname="ds.mean_smk_type_combine_" name="mean_values_combine_">
      <error type="error" message="(list) object cannot be coerced to type 'double' (@test-smk-ds.mean.R#32)">(list) object cannot be coerced to type 'double'
1: expect_equal(as.numeric(stat.mean), 5.85192485623003, tolerance = 1e-15) at /home/vsts/work/1/s/tests/testthat/test-smk-ds.mean.R:32
2: quasi_label(enquo(object), label, arg = "object")
3: eval_bare(get_expr(quo), get_env(quo))</error>
    </testcase>
  </testsuite>
  <testsuite name="ds.mean::smk::(type=combine) loose" timestamp="2019-08-01 10:16:22" hostname="fv-az670" tests="2" skipped="0" failures="1" errors="1" time="0.84">
    <testcase time="0.84" classname="ds.mean_smk_type_combine_loose" name="mean_values_combine_loose">
      <failure type="failure" message="is.na(stat.mean) isn't false. (@test-smk-ds.mean.R#40)">is.na(stat.mean) isn't false.</failure>
    </testcase>
    <testcase time="0" classname="ds.mean_smk_type_combine_loose" name="mean_values_combine_loose">
      <error type="error" message="(list) object cannot be coerced to type 'double' (@test-smk-ds.mean.R#41)">(list) object cannot be coerced to type 'double'
1: expect_equal(as.numeric(stat.mean), 5.85192485623003, tolerance = 1e-15) at /home/vsts/work/1/s/tests/testthat/test-smk-ds.mean.R:41
2: quasi_label(enquo(object), label, arg = "object")
3: eval_bare(get_expr(quo), get_env(quo))</error>
    </testcase>
  </testsuite>
  <testsuite name="ds.mean::smk::(type=split)" timestamp="2019-08-01 10:16:22" hostname="fv-az670" tests="6" skipped="0" failures="6" errors="0" time="0.26">
    <testcase time="0.26" classname="ds.mean_smk_type_split_" name="mean_values_split_">
      <failure type="failure" message="is.na(stat.mean$sim1) isn't false. (@test-smk-ds.mean.R#49)">is.na(stat.mean$sim1) isn't false.</failure>
    </testcase>
    <testcase time="0" classname="ds.mean_smk_type_split_" name="mean_values_split_">
      <failure type="failure" message="stat.mean$sim1 not equal to 5.872113. (@test-smk-ds.mean.R#50)">stat.mean$sim1 not equal to 5.872113.
target is NULL, current is numeric</failure>
    </testcase>
    <testcase time="0" classname="ds.mean_smk_type_split_" name="mean_values_split_">
      <failure type="failure" message="is.na(stat.mean$sim2) isn't false. (@test-smk-ds.mean.R#51)">is.na(stat.mean$sim2) isn't false.</failure>
    </testcase>
    <testcase time="0" classname="ds.mean_smk_type_split_" name="mean_values_split_">
      <failure type="failure" message="stat.mean$sim2 not equal to 5.845264. (@test-smk-ds.mean.R#52)">stat.mean$sim2 not equal to 5.845264.
target is NULL, current is numeric</failure>
    </testcase>
    <testcase time="0" classname="ds.mean_smk_type_split_" name="mean_values_split_">
      <failure type="failure" message="is.na(stat.mean$sim3) isn't false. (@test-smk-ds.mean.R#53)">is.na(stat.mean$sim3) isn't false.</failure>
    </testcase>
    <testcase time="0" classname="ds.mean_smk_type_split_" name="mean_values_split_">
      <failure type="failure" message="stat.mean$sim3 not equal to 5.8463. (@test-smk-ds.mean.R#54)">stat.mean$sim3 not equal to 5.8463.
target is NULL, current is numeric</failure>
    </testcase>
  </testsuite>
  <testsuite name="ds.mean::smk::test errors" timestamp="2019-08-01 10:16:23" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="1" time="0.44">
    <testcase time="0.44" classname="ds.mean_smk_test_errors" name="_unnamed_">
      <error type="error" message="Command 'testObjExistsDS(&quot;not_a_numeric&quot;)' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: testObjExistsDS (@test-smk-ds.mean.R#58)">Command 'testObjExistsDS("not_a_numeric")' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: testObjExistsDS
1: ds.asCharacter(x = "D$LAB_TSC", newobj = "not_a_numeric") at /home/vsts/work/1/s/tests/testthat/test-smk-ds.mean.R:58
2: opal::datashield.aggregate(datasources, calltext) at /home/vsts/work/1/s/R/ds.asCharacter.R:67
3: datashield.aggregate.list(datasources, calltext)
4: datashield.command_result(opal, res, wait = TRUE)
5: datashield.command_result.list(opal, res, wait = TRUE)
6: lapply(1:length(opal), function(i) {
       datashield.command_result(opal[[i]], id[[i]], wait = wait)
   })
7: FUN(X[[i]], ...)
8: datashield.command_result(opal[[i]], id[[i]], wait = wait)
9: datashield.command_result.opal(opal[[i]], id[[i]], wait = wait)
10: stop("Command '", cmd$script, "' failed on '", opal$name, "': ", msg, call. = FALSE)</error>
    </testcase>
  </testsuite>
  <testsuite name="ds.names::smk" timestamp="2019-08-01 10:16:23" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.names::smk::test errors" timestamp="2019-08-01 10:16:29" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="1" time="6.43">
    <testcase time="6.43" classname="ds.names_smk_test_errors" name="_unnamed_">
      <error type="error" message="Command 'testObjExistsDS(&quot;not_a_list&quot;)' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: testObjExistsDS (@test-smk-ds.names.R#27)">Command 'testObjExistsDS("not_a_list")' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: testObjExistsDS
1: ds.asCharacter(x = "D$GENDER", newobj = "not_a_list") at /home/vsts/work/1/s/tests/testthat/test-smk-ds.names.R:27
2: opal::datashield.aggregate(datasources, calltext) at /home/vsts/work/1/s/R/ds.asCharacter.R:67
3: datashield.aggregate.list(datasources, calltext)
4: datashield.command_result(opal, res, wait = TRUE)
5: datashield.command_result.list(opal, res, wait = TRUE)
6: lapply(1:length(opal), function(i) {
       datashield.command_result(opal[[i]], id[[i]], wait = wait)
   })
7: FUN(X[[i]], ...)
8: datashield.command_result(opal[[i]], id[[i]], wait = wait)
9: datashield.command_result.opal(opal[[i]], id[[i]], wait = wait)
10: stop("Command '", cmd$script, "' failed on '", opal$name, "': ", msg, call. = FALSE)</error>
    </testcase>
  </testsuite>
  <testsuite name="ds.quantileMean::smk" timestamp="2019-08-01 10:16:30" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.quantileMean::smk::standard" timestamp="2019-08-01 10:16:36" hostname="fv-az670" tests="2" skipped="0" failures="0" errors="0" time="7.27">
    <testcase time="7.27" classname="ds.quantileMean_smk_standard" name="quantileMean"/>
    <testcase time="0" classname="ds.quantileMean_smk_standard" name="quantileMean"/>
  </testsuite>
  <testsuite name="ds.quantileMean::smk::split" timestamp="2019-08-01 10:16:37" hostname="fv-az670" tests="3" skipped="0" failures="0" errors="0" time="1.85">
    <testcase time="1.85" classname="ds.quantileMean_smk_split" name="quantileMean_split"/>
    <testcase time="0" classname="ds.quantileMean_smk_split" name="quantileMean_split"/>
    <testcase time="0" classname="ds.quantileMean_smk_split" name="quantileMean_split"/>
  </testsuite>
  <testsuite name="ds.quantileMean::smk::test errors" timestamp="2019-08-01 10:16:39" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="1" time="0.41">
    <testcase time="0.41" classname="ds.quantileMean_smk_test_errors" name="_unnamed_">
      <error type="error" message="Command 'testObjExistsDS(&quot;not_a_numeric&quot;)' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: testObjExistsDS (@test-smk-ds.quantileMean.R#36)">Command 'testObjExistsDS("not_a_numeric")' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: testObjExistsDS
1: ds.asCharacter(x = "D$LAB_HDL", newobj = "not_a_numeric") at /home/vsts/work/1/s/tests/testthat/test-smk-ds.quantileMean.R:36
2: opal::datashield.aggregate(datasources, calltext) at /home/vsts/work/1/s/R/ds.asCharacter.R:67
3: datashield.aggregate.list(datasources, calltext)
4: datashield.command_result(opal, res, wait = TRUE)
5: datashield.command_result.list(opal, res, wait = TRUE)
6: lapply(1:length(opal), function(i) {
       datashield.command_result(opal[[i]], id[[i]], wait = wait)
   })
7: FUN(X[[i]], ...)
8: datashield.command_result(opal[[i]], id[[i]], wait = wait)
9: datashield.command_result.opal(opal[[i]], id[[i]], wait = wait)
10: stop("Command '", cmd$script, "' failed on '", opal$name, "': ", msg, call. = FALSE)</error>
    </testcase>
  </testsuite>
  <testsuite name="ds.recodeLevels::smk" timestamp="2019-08-01 10:16:39" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.rowColCalc::smk" timestamp="2019-08-01 10:16:45" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.rowColCalc::smk" timestamp="2019-08-01 10:16:51" hostname="fv-az670" tests="3" skipped="0" failures="0" errors="0" time="16.33">
    <testcase time="16.33" classname="ds.rowColCalc_smk" name="rowColCalc_exists"/>
    <testcase time="0" classname="ds.rowColCalc_smk" name="rowColCalc_exists"/>
    <testcase time="0" classname="ds.rowColCalc_smk" name="rowColCalc_exists"/>
  </testsuite>
  <testsuite name="ds.rowColCalc::smk::no newobj" timestamp="2019-08-01 10:16:55" hostname="fv-az670" tests="3" skipped="0" failures="0" errors="0" time="4.36">
    <testcase time="4.36" classname="ds.rowColCalc_smk_no_newobj" name="rowColCalc_out_exists"/>
    <testcase time="0" classname="ds.rowColCalc_smk_no_newobj" name="rowColCalc_out_exists"/>
    <testcase time="0" classname="ds.rowColCalc_smk_no_newobj" name="rowColCalc_out_exists"/>
  </testsuite>
  <testsuite name="ds.rowColCalc::smk::test errors" timestamp="2019-08-01 10:17:00" hostname="fv-az670" tests="3" skipped="0" failures="0" errors="0" time="6.62">
    <testcase time="0" classname="ds.rowColCalc_smk_test_errors" name="rowColCalc_errors"/>
    <testcase time="3.31" classname="ds.rowColCalc_smk_test_errors" name="rowColCalc_errors"/>
    <testcase time="3.31" classname="ds.rowColCalc_smk_test_errors" name="rowColCalc_errors"/>
  </testsuite>
  <testsuite name="ds.subset::smk" timestamp="2019-08-01 10:17:06" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.subset::smk::generate a subset of the assigned table (by default the table is named 'D') with the first 50 observations and the two first columns refered to by their names" timestamp="2019-08-01 10:17:12" hostname="fv-az670" tests="3" skipped="0" failures="0" errors="0" time="8.26">
    <testcase time="8.26" classname="ds.subset_smk_generate_a_subset_of_the_assigned_table_by_default_the_table_is_named_D_with_the_first_50_observations_and_the_two_first_columns_refered_to_by_their_names" name="subD2_exists"/>
    <testcase time="0" classname="ds.subset_smk_generate_a_subset_of_the_assigned_table_by_default_the_table_is_named_D_with_the_first_50_observations_and_the_two_first_columns_refered_to_by_their_names" name="subD2_exists"/>
    <testcase time="0" classname="ds.subset_smk_generate_a_subset_of_the_assigned_table_by_default_the_table_is_named_D_with_the_first_50_observations_and_the_two_first_columns_refered_to_by_their_names" name="subD2_exists"/>
  </testsuite>
  <testsuite name="ds.summary::smk" timestamp="2019-08-01 10:17:15" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.summary::smk::summary of a numerical variable" timestamp="2019-08-01 10:17:21" hostname="fv-az670" tests="3" skipped="0" failures="0" errors="0" time="8.83">
    <testcase time="8.83" classname="ds.summary_smk_summary_of_a_numerical_variable" name="summary_numerical_variable"/>
    <testcase time="0" classname="ds.summary_smk_summary_of_a_numerical_variable" name="summary_numerical_variable"/>
    <testcase time="0" classname="ds.summary_smk_summary_of_a_numerical_variable" name="summary_numerical_variable"/>
  </testsuite>
  <testsuite name="ds.summary::smk::summary of a character variable" timestamp="2019-08-01 10:17:24" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="1" time="0.41">
    <testcase time="0.41" classname="ds.summary_smk_summary_of_a_character_variable" name="_unnamed_">
      <error type="error" message="Command 'testObjExistsDS(&quot;a_character&quot;)' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: testObjExistsDS (@test-smk-ds.summary.R#21)">Command 'testObjExistsDS("a_character")' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: testObjExistsDS
1: ds.asCharacter(x = "D$GENDER", newobj = "a_character") at /home/vsts/work/1/s/tests/testthat/test-smk-ds.summary.R:21
2: opal::datashield.aggregate(datasources, calltext) at /home/vsts/work/1/s/R/ds.asCharacter.R:67
3: datashield.aggregate.list(datasources, calltext)
4: datashield.command_result(opal, res, wait = TRUE)
5: datashield.command_result.list(opal, res, wait = TRUE)
6: lapply(1:length(opal), function(i) {
       datashield.command_result(opal[[i]], id[[i]], wait = wait)
   })
7: FUN(X[[i]], ...)
8: datashield.command_result(opal[[i]], id[[i]], wait = wait)
9: datashield.command_result.opal(opal[[i]], id[[i]], wait = wait)
10: stop("Command '", cmd$script, "' failed on '", opal$name, "': ", msg, call. = FALSE)</error>
    </testcase>
  </testsuite>
  <testsuite name="ds.table1D::smk" timestamp="2019-08-01 10:17:24" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.table1D::smk::generate a one dimensional table, outputting combined contingency tables" timestamp="2019-08-01 10:17:30" hostname="fv-az670" tests="3" skipped="0" failures="0" errors="0" time="6.81">
    <testcase time="6.81" classname="ds.table1D_smk_generate_a_one_dimensional_table_outputting_combined_contingency_tables" name="GENDER_normal"/>
    <testcase time="0" classname="ds.table1D_smk_generate_a_one_dimensional_table_outputting_combined_contingency_tables" name="GENDER_normal"/>
    <testcase time="0" classname="ds.table1D_smk_generate_a_one_dimensional_table_outputting_combined_contingency_tables" name="GENDER_normal"/>
  </testsuite>
  <testsuite name="ds.table1D::smk::generate a one dimensional table, outputting combined contingency tables fail" timestamp="2019-08-01 10:17:31" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="0" time="0.82">
    <testcase time="0.82" classname="ds.table1D_smk_generate_a_one_dimensional_table_outputting_combined_contingency_tables_fail" name="DIS_CVA_invalid"/>
  </testsuite>
  <testsuite name="ds.table1D::smk::generate a one dimensional table, outputting combined contingency tables fail split" timestamp="2019-08-01 10:17:32" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="0" time="0.77">
    <testcase time="0.77" classname="ds.table1D_smk_generate_a_one_dimensional_table_outputting_combined_contingency_tables_fail_split" name="DIS_CVA_invalid_split"/>
  </testsuite>
  <testsuite name="ds.table1D::smk::generate a one dimensional table, outputting study specific contingency tables" timestamp="2019-08-01 10:17:32" hostname="fv-az670" tests="4" skipped="0" failures="0" errors="0" time="0.77">
    <testcase time="0.77" classname="ds.table1D_smk_generate_a_one_dimensional_table_outputting_study_specific_contingency_tables" name="GENDER_split"/>
    <testcase time="0" classname="ds.table1D_smk_generate_a_one_dimensional_table_outputting_study_specific_contingency_tables" name="GENDER_split"/>
    <testcase time="0" classname="ds.table1D_smk_generate_a_one_dimensional_table_outputting_study_specific_contingency_tables" name="GENDER_split"/>
    <testcase time="0" classname="ds.table1D_smk_generate_a_one_dimensional_table_outputting_study_specific_contingency_tables" name="GENDER_split"/>
  </testsuite>
  <testsuite name="ds.table1D::smk::generate a one dimensional table, outputting study specific contingency tables for study 1 and 2" timestamp="2019-08-01 10:17:33" hostname="fv-az670" tests="4" skipped="0" failures="0" errors="0" time="0.74">
    <testcase time="0.74" classname="ds.table1D_smk_generate_a_one_dimensional_table_outputting_study_specific_contingency_tables_for_study_1_and_2" name="GENDER_split_12"/>
    <testcase time="0" classname="ds.table1D_smk_generate_a_one_dimensional_table_outputting_study_specific_contingency_tables_for_study_1_and_2" name="GENDER_split_12"/>
    <testcase time="0" classname="ds.table1D_smk_generate_a_one_dimensional_table_outputting_study_specific_contingency_tables_for_study_1_and_2" name="GENDER_split_12"/>
    <testcase time="0" classname="ds.table1D_smk_generate_a_one_dimensional_table_outputting_study_specific_contingency_tables_for_study_1_and_2" name="GENDER_split_12"/>
  </testsuite>
  <testsuite name="ds.table1D::smk::generate a one dimensional table, outputting study specific and combined contingency tables" timestamp="2019-08-01 10:17:34" hostname="fv-az670" tests="3" skipped="0" failures="0" errors="0" time="0.77">
    <testcase time="0.77" classname="ds.table1D_smk_generate_a_one_dimensional_table_outputting_study_specific_and_combined_contingency_tables" name="GENDER_normal_2"/>
    <testcase time="0" classname="ds.table1D_smk_generate_a_one_dimensional_table_outputting_study_specific_and_combined_contingency_tables" name="GENDER_normal_2"/>
    <testcase time="0" classname="ds.table1D_smk_generate_a_one_dimensional_table_outputting_study_specific_and_combined_contingency_tables" name="GENDER_normal_2"/>
  </testsuite>
  <testsuite name="ds.table1D::smk::test errors" timestamp="2019-08-01 10:17:35" hostname="fv-az670" tests="2" skipped="0" failures="0" errors="0" time="0.76">
    <testcase time="0" classname="ds.table1D_smk_test_errors" name="table1D_erros"/>
    <testcase time="0.76" classname="ds.table1D_smk_test_errors" name="table1D_erros"/>
  </testsuite>
  <testsuite name="ds.table2D::smk" timestamp="2019-08-01 10:17:35" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.table2D::smk::generate a two dimensional table, outputting combined contingency tables - default behaviour" timestamp="2019-08-01 10:17:41" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="1" time="6.72">
    <testcase time="6.72" classname="ds.table2D_smk_generate_a_two_dimensional_table_outputting_combined_contingency_tables_default_behaviour" name="_unnamed_">
      <error type="error" message="Command 'table2DDS(D$DIS_DIAB,D$GENDER)' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: table2DDS (@test-smk-ds.table2D.R#27)">Command 'table2DDS(D$DIS_DIAB,D$GENDER)' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: table2DDS
1: ds.table2D(datasources = ds.test_env$connection.opal, x = "D$DIS_DIAB", y = "D$GENDER") at /home/vsts/work/1/s/tests/testthat/test-smk-ds.table2D.R:27
2: opal::datashield.aggregate(datasources, as.symbol(cally)) at /home/vsts/work/1/s/R/ds.table2D.R:142
3: datashield.aggregate.list(datasources, as.symbol(cally))
4: datashield.command_result(opal, res, wait = TRUE)
5: datashield.command_result.list(opal, res, wait = TRUE)
6: lapply(1:length(opal), function(i) {
       datashield.command_result(opal[[i]], id[[i]], wait = wait)
   })
7: FUN(X[[i]], ...)
8: datashield.command_result(opal[[i]], id[[i]], wait = wait)
9: datashield.command_result.opal(opal[[i]], id[[i]], wait = wait)
10: stop("Command '", cmd$script, "' failed on '", opal$name, "': ", msg, call. = FALSE)</error>
    </testcase>
  </testsuite>
</testsuites>
