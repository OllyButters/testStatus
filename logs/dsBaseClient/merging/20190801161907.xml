<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="ds.asCharacter::smk" timestamp="2019-08-01 16:53:14" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.asCharacter::smk::turn the factor variable 'GENDER' into a character vector" timestamp="2019-08-01 16:53:20" hostname="fv-az670" tests="3" skipped="0" failures="0" errors="0" time="7.34">
    <testcase time="7.31" classname="ds.asCharacter_smk_turn_the_factor_variable_GENDER_into_a_character_vector" name="asCharacter_exists"/>
    <testcase time="0.02" classname="ds.asCharacter_smk_turn_the_factor_variable_GENDER_into_a_character_vector" name="asCharacter_exists"/>
    <testcase time="0.01" classname="ds.asCharacter_smk_turn_the_factor_variable_GENDER_into_a_character_vector" name="asCharacter_exists"/>
  </testsuite>
  <testsuite name="ds.asCharacter::smk::no table or newobj" timestamp="2019-08-01 16:53:22" hostname="fv-az670" tests="3" skipped="0" failures="3" errors="0" time="1.08">
    <testcase time="1.08" classname="ds.asCharacter_smk_no_table_or_newobj" name="defualt_Character_exists">
      <failure type="failure" message="res$sim1 isn't true. (@test-smk-ds.asCharacter.R#39)">res$sim1 isn't true.</failure>
    </testcase>
    <testcase time="0" classname="ds.asCharacter_smk_no_table_or_newobj" name="defualt_Character_exists">
      <failure type="failure" message="res$sim2 isn't true. (@test-smk-ds.asCharacter.R#40)">res$sim2 isn't true.</failure>
    </testcase>
    <testcase time="0" classname="ds.asCharacter_smk_no_table_or_newobj" name="defualt_Character_exists">
      <failure type="failure" message="res$sim3 isn't true. (@test-smk-ds.asCharacter.R#41)">res$sim3 isn't true.</failure>
    </testcase>
  </testsuite>
  <testsuite name="ds.asCharacter::smk::no x" timestamp="2019-08-01 16:53:23" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="0" time="0">
    <testcase time="0" classname="ds.asCharacter_smk_no_x" name="asCharacter_no_x"/>
  </testsuite>
  <testsuite name="ds.asList::smk" timestamp="2019-08-01 16:53:23" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.asList::smk::turn the data frame D into a list" timestamp="2019-08-01 16:53:29" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="1" time="6.8">
    <testcase time="6.8" classname="ds.asList_smk_turn_the_data_frame_D_into_a_list" name="_unnamed_">
      <error type="error" message="The input object(s) D_list is(are) not defined on one or more of the studies! (@test-smk-ds.asList.R#28)">The input object(s) D_list is(are) not defined on one or more of the studies!
1: ds.summary(x = "D_list") at /home/vsts/work/1/s/tests/testthat/test-smk-ds.asList.R:28
2: isDefined(datasources, varname) at /home/vsts/work/1/s/R/ds.summary.R:55
3: stop("The input object(s) ", paste(myObjects[idx], collapse = ", "), " is(are) not defined on one or more of the studies!", 
       call. = FALSE) at /home/vsts/work/1/s/R/isDefined.R:36</error>
    </testcase>
  </testsuite>
  <testsuite name="ds.assign::smk" timestamp="2019-08-01 16:53:29" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.assign::smk" timestamp="2019-08-01 16:53:36" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="0" time="6.89">
    <testcase time="6.89" classname="ds.assign_smk" name="test_assign"/>
  </testsuite>
  <testsuite name="ds.dataframe::smk" timestamp="2019-08-01 16:53:36" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.dataframe::smk::create a dataframe" timestamp="2019-08-01 16:53:43" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="1" time="7.29">
    <testcase time="7.29" classname="ds.dataframe_smk_create_a_dataframe" name="_unnamed_">
      <error type="error" message="argument is of length zero (@test-smk-ds.dataframe.R#18)">argument is of length zero
1: ds.dataframe(x = myvectors) at /home/vsts/work/1/s/tests/testthat/test-smk-ds.dataframe.R:18</error>
    </testcase>
  </testsuite>
  <testsuite name="ds.dim:smk" timestamp="2019-08-01 16:53:44" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.dim::smk" timestamp="2019-08-01 16:53:50" hostname="fv-az670" tests="4" skipped="0" failures="4" errors="0" time="7.43">
    <testcase time="6.61" classname="ds.dim_smk" name="test_dim">
      <failure type="failure" message="ds.dim(x = &quot;D&quot;)$sim1 not equal to c(2163, 11). (@test-smk-ds.dim.R#19)">ds.dim(x = "D")$sim1 not equal to c(2163, 11).
target is NULL, current is numeric</failure>
    </testcase>
    <testcase time="0.3" classname="ds.dim_smk" name="test_dim">
      <failure type="failure" message="ds.dim(x = &quot;D&quot;)$sim2 not equal to c(3088, 11). (@test-smk-ds.dim.R#20)">ds.dim(x = "D")$sim2 not equal to c(3088, 11).
target is NULL, current is numeric</failure>
    </testcase>
    <testcase time="0.26" classname="ds.dim_smk" name="test_dim">
      <failure type="failure" message="ds.dim(x = &quot;D&quot;)$sim3 not equal to c(4128, 11). (@test-smk-ds.dim.R#21)">ds.dim(x = "D")$sim3 not equal to c(4128, 11).
target is NULL, current is numeric</failure>
    </testcase>
    <testcase time="0.26" classname="ds.dim_smk" name="test_dim">
      <failure type="failure" message="ds.dim(x = &quot;D&quot;, type = &quot;combine&quot;)$pooled.dimension not equal to c(9379, 11). (@test-smk-ds.dim.R#22)">ds.dim(x = "D", type = "combine")$pooled.dimension not equal to c(9379, 11).
target is NULL, current is numeric</failure>
    </testcase>
  </testsuite>
  <testsuite name="ds.dim::smk::errors" timestamp="2019-08-01 16:53:51" hostname="fv-az670" tests="3" skipped="0" failures="2" errors="0" time="0.53">
    <testcase time="0" classname="ds.dim_smk_errors" name="dim_errors"/>
    <testcase time="0.27" classname="ds.dim_smk_errors" name="dim_errors">
      <failure type="failure" message="`ds.dim(x = &quot;D$LAB_TSC&quot;)` did not throw an error. (@test-smk-ds.dim.R#29)">`ds.dim(x = "D$LAB_TSC")` did not throw an error.</failure>
    </testcase>
    <testcase time="0.26" classname="ds.dim_smk_errors" name="dim_errors">
      <failure type="failure" message="`ds.dim(x = &quot;D&quot;, type = &quot;datashield&quot;)` threw an error with unexpected message. (@test-smk-ds.dim.R#30)">`ds.dim(x = "D", type = "datashield")` threw an error with unexpected message.
Expected match: "Function argument \"type\" has to be either \"combine\" or \"split\""
Actual message: "Function argument \"type\" has to be either \"both\", \"combine\" or \"split\""</failure>
    </testcase>
  </testsuite>
  <testsuite name="ds.isNA::smk" timestamp="2019-08-01 16:53:52" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.isNA::smk" timestamp="2019-08-01 16:53:58" hostname="fv-az670" tests="3" skipped="0" failures="0" errors="0" time="7.52">
    <testcase time="7.52" classname="ds.isNA_smk" name="isNA"/>
    <testcase time="0" classname="ds.isNA_smk" name="isNA"/>
    <testcase time="0" classname="ds.isNA_smk" name="isNA"/>
  </testsuite>
  <testsuite name="ds.isNA()::smk::errors" timestamp="2019-08-01 16:53:59" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="0" time="0.02">
    <testcase time="0.02" classname="ds.isNA_smk_errors" name="isNA_errors"/>
  </testsuite>
  <testsuite name="ds.length::smk" timestamp="2019-08-01 16:53:59" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.length::smk" timestamp="2019-08-01 16:54:05" hostname="fv-az670" tests="3" skipped="0" failures="3" errors="0" time="7.15">
    <testcase time="6.59" classname="ds.length_smk" name="test_length">
      <failure type="failure" message="ds.length(x = &quot;D$LAB_TSC&quot;)$total.number.of.observations not equal to 9379. (@test-smk-ds.length.R#18)">ds.length(x = "D$LAB_TSC")$total.number.of.observations not equal to 9379.
target is NULL, current is numeric</failure>
    </testcase>
    <testcase time="0.3" classname="ds.length_smk" name="test_length">
      <failure type="failure" message="ds.length(x = &quot;D$LAB_TSC&quot;, type = &quot;split&quot;)$sim2 not equal to 3088. (@test-smk-ds.length.R#19)">ds.length(x = "D$LAB_TSC", type = "split")$sim2 not equal to 3088.
target is NULL, current is numeric</failure>
    </testcase>
    <testcase time="0.26" classname="ds.length_smk" name="test_length">
      <failure type="failure" message="ds.length(x = &quot;D$LAB_TSC&quot;, type = &quot;split&quot;)$sim3 not equal to 4128. (@test-smk-ds.length.R#20)">ds.length(x = "D$LAB_TSC", type = "split")$sim3 not equal to 4128.
target is NULL, current is numeric</failure>
    </testcase>
  </testsuite>
  <testsuite name="ds.length::smk::errors" timestamp="2019-08-01 16:54:06" hostname="fv-az670" tests="3" skipped="0" failures="2" errors="0" time="0.26">
    <testcase time="0" classname="ds.length_smk_errors" name="length_errors"/>
    <testcase time="0.26" classname="ds.length_smk_errors" name="length_errors">
      <failure type="failure" message="`ds.length(x = &quot;D&quot;)` did not throw an error. (@test-smk-ds.length.R#27)">`ds.length(x = "D")` did not throw an error.</failure>
    </testcase>
    <testcase time="0" classname="ds.length_smk_errors" name="length_errors">
      <failure type="failure" message="`ds.length(x = &quot;D$LAB_TSC&quot;, type = &quot;datashield&quot;)` threw an error with unexpected message. (@test-smk-ds.length.R#28)">`ds.length(x = "D$LAB_TSC", type = "datashield")` threw an error with unexpected message.
Expected match: "Function argument \"type\" has to be either \"combine\" or \"split\""
Actual message: "Function argument \"type\" has to be either \"both\", \"combine\" or \"split\""</failure>
    </testcase>
  </testsuite>
  <testsuite name="ds.list::smk" timestamp="2019-08-01 16:54:07" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.list::smk" timestamp="2019-08-01 16:54:13" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="0" time="8.32">
    <testcase time="8.32" classname="ds.list_smk" name="Is_List"/>
  </testsuite>
  <testsuite name="ds.list::smk::test errors" timestamp="2019-08-01 16:54:15" hostname="fv-az670" tests="2" skipped="0" failures="0" errors="0" time="0.02">
    <testcase time="0.02" classname="ds.list_smk_test_errors" name="list_erros"/>
    <testcase time="0" classname="ds.list_smk_test_errors" name="list_erros"/>
  </testsuite>
  <testsuite name="ds.meanByClass::smk" timestamp="2019-08-01 16:54:15" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.meanByClass::smk::calculate the mean proportion for LAB_HDL across gender categories" timestamp="2019-08-01 16:54:21" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="1" time="10.92">
    <testcase time="10.92" classname="ds.meanByClass_smk_calculate_the_mean_proportion_for_LAB_HDL_across_gender_categories" name="_unnamed_">
      <error type="error" message="non-numeric argument to binary operator (@test-smk-ds.meanByClass.R#27)">non-numeric argument to binary operator
1: ds.meanByClass(x = "D", outvar = "LAB_HDL", covar = "GENDER") at /home/vsts/work/1/s/tests/testthat/test-smk-ds.meanByClass.R:27
2: meanByClassHelper0b(x, outvar, covar, type, datasources) at /home/vsts/work/1/s/R/ds.meanByClass.R:90
3: meanByClassHelper2(datasources, subsetnames, outvar, invalidrecorder) at /home/vsts/work/1/s/R/meanByClassHelper0b.R:73
4: getPooledMean(dtsources, paste0(tablename, "$", variables[z])) at /home/vsts/work/1/s/R/meanByClassHelper2.R:71</error>
    </testcase>
  </testsuite>
  <testsuite name="ds.mean::smk" timestamp="2019-08-01 16:54:26" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.mean::smk::(type=combine)" timestamp="2019-08-01 16:54:32" hostname="fv-az670" tests="2" skipped="0" failures="1" errors="1" time="6.42">
    <testcase time="6.42" classname="ds.mean_smk_type_combine_" name="mean_values_combine_">
      <failure type="failure" message="is.na(stat.mean) isn't false. (@test-smk-ds.mean.R#31)">is.na(stat.mean) isn't false.</failure>
    </testcase>
    <testcase time="0" classname="ds.mean_smk_type_combine_" name="mean_values_combine_">
      <error type="error" message="(list) object cannot be coerced to type 'double' (@test-smk-ds.mean.R#32)">(list) object cannot be coerced to type 'double'
1: expect_equal(as.numeric(stat.mean), 5.85192485623003, tolerance = 1e-15) at /home/vsts/work/1/s/tests/testthat/test-smk-ds.mean.R:32
2: quasi_label(enquo(object), label, arg = "object")
3: eval_bare(get_expr(quo), get_env(quo))</error>
    </testcase>
  </testsuite>
  <testsuite name="ds.mean::smk::(type=combine) loose" timestamp="2019-08-01 16:54:32" hostname="fv-az670" tests="2" skipped="0" failures="1" errors="1" time="0.85">
    <testcase time="0.85" classname="ds.mean_smk_type_combine_loose" name="mean_values_combine_loose">
      <failure type="failure" message="is.na(stat.mean) isn't false. (@test-smk-ds.mean.R#40)">is.na(stat.mean) isn't false.</failure>
    </testcase>
    <testcase time="0" classname="ds.mean_smk_type_combine_loose" name="mean_values_combine_loose">
      <error type="error" message="(list) object cannot be coerced to type 'double' (@test-smk-ds.mean.R#41)">(list) object cannot be coerced to type 'double'
1: expect_equal(as.numeric(stat.mean), 5.85192485623003, tolerance = 1e-15) at /home/vsts/work/1/s/tests/testthat/test-smk-ds.mean.R:41
2: quasi_label(enquo(object), label, arg = "object")
3: eval_bare(get_expr(quo), get_env(quo))</error>
    </testcase>
  </testsuite>
  <testsuite name="ds.mean::smk::(type=split)" timestamp="2019-08-01 16:54:33" hostname="fv-az670" tests="6" skipped="0" failures="6" errors="0" time="0.26">
    <testcase time="0.26" classname="ds.mean_smk_type_split_" name="mean_values_split_">
      <failure type="failure" message="is.na(stat.mean$sim1) isn't false. (@test-smk-ds.mean.R#49)">is.na(stat.mean$sim1) isn't false.</failure>
    </testcase>
    <testcase time="0" classname="ds.mean_smk_type_split_" name="mean_values_split_">
      <failure type="failure" message="stat.mean$sim1 not equal to 5.872113. (@test-smk-ds.mean.R#50)">stat.mean$sim1 not equal to 5.872113.
target is NULL, current is numeric</failure>
    </testcase>
    <testcase time="0" classname="ds.mean_smk_type_split_" name="mean_values_split_">
      <failure type="failure" message="is.na(stat.mean$sim2) isn't false. (@test-smk-ds.mean.R#51)">is.na(stat.mean$sim2) isn't false.</failure>
    </testcase>
    <testcase time="0" classname="ds.mean_smk_type_split_" name="mean_values_split_">
      <failure type="failure" message="stat.mean$sim2 not equal to 5.845264. (@test-smk-ds.mean.R#52)">stat.mean$sim2 not equal to 5.845264.
target is NULL, current is numeric</failure>
    </testcase>
    <testcase time="0" classname="ds.mean_smk_type_split_" name="mean_values_split_">
      <failure type="failure" message="is.na(stat.mean$sim3) isn't false. (@test-smk-ds.mean.R#53)">is.na(stat.mean$sim3) isn't false.</failure>
    </testcase>
    <testcase time="0" classname="ds.mean_smk_type_split_" name="mean_values_split_">
      <failure type="failure" message="stat.mean$sim3 not equal to 5.8463. (@test-smk-ds.mean.R#54)">stat.mean$sim3 not equal to 5.8463.
target is NULL, current is numeric</failure>
    </testcase>
  </testsuite>
  <testsuite name="ds.mean::smk::test errors" timestamp="2019-08-01 16:54:33" hostname="fv-az670" tests="3" skipped="0" failures="2" errors="0" time="1.05">
    <testcase time="0.79" classname="ds.mean_smk_test_errors" name="mean_erros"/>
    <testcase time="0" classname="ds.mean_smk_test_errors" name="mean_erros">
      <failure type="failure" message="`ds.mean(x = &quot;D$LAB_TSC&quot;, type = &quot;datashield&quot;)` threw an error with unexpected message. (@test-smk-ds.mean.R#61)">`ds.mean(x = "D$LAB_TSC", type = "datashield")` threw an error with unexpected message.
Expected match: "Function argument \"type\" has to be either \"combine\" or \"split\""
Actual message: "Function argument \"type\" has to be either \"both\", \"combine\" or \"split\""</failure>
    </testcase>
    <testcase time="0.26" classname="ds.mean_smk_test_errors" name="mean_erros">
      <failure type="failure" message="`ds.mean(x = &quot;not_a_numeric&quot;)` did not throw an error. (@test-smk-ds.mean.R#62)">`ds.mean(x = "not_a_numeric")` did not throw an error.</failure>
    </testcase>
  </testsuite>
  <testsuite name="ds.names::smk" timestamp="2019-08-01 16:54:34" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.names::smk::test errors" timestamp="2019-08-01 16:54:41" hostname="fv-az670" tests="2" skipped="0" failures="0" errors="0" time="7.48">
    <testcase time="6.96" classname="ds.names_smk_test_errors" name="names_erros"/>
    <testcase time="0.52" classname="ds.names_smk_test_errors" name="names_erros"/>
  </testsuite>
  <testsuite name="ds.quantileMean::smk" timestamp="2019-08-01 16:54:42" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.quantileMean::smk::standard" timestamp="2019-08-01 16:54:48" hostname="fv-az670" tests="2" skipped="0" failures="0" errors="0" time="7.41">
    <testcase time="7.41" classname="ds.quantileMean_smk_standard" name="quantileMean"/>
    <testcase time="0" classname="ds.quantileMean_smk_standard" name="quantileMean"/>
  </testsuite>
  <testsuite name="ds.quantileMean::smk::split" timestamp="2019-08-01 16:54:49" hostname="fv-az670" tests="3" skipped="0" failures="0" errors="0" time="1.84">
    <testcase time="1.84" classname="ds.quantileMean_smk_split" name="quantileMean_split"/>
    <testcase time="0" classname="ds.quantileMean_smk_split" name="quantileMean_split"/>
    <testcase time="0" classname="ds.quantileMean_smk_split" name="quantileMean_split"/>
  </testsuite>
  <testsuite name="ds.quantileMean::smk::test errors" timestamp="2019-08-01 16:54:51" hostname="fv-az670" tests="3" skipped="0" failures="0" errors="0" time="2.57">
    <testcase time="0.79" classname="ds.quantileMean_smk_test_errors" name="quantileMean_erros"/>
    <testcase time="1.27" classname="ds.quantileMean_smk_test_errors" name="quantileMean_erros"/>
    <testcase time="0.51" classname="ds.quantileMean_smk_test_errors" name="quantileMean_erros"/>
  </testsuite>
  <testsuite name="ds.recodeLevels::smk" timestamp="2019-08-01 16:54:54" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.rowColCalc::smk" timestamp="2019-08-01 16:55:00" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.rowColCalc::smk" timestamp="2019-08-01 16:55:06" hostname="fv-az670" tests="3" skipped="0" failures="0" errors="0" time="16.42">
    <testcase time="16.42" classname="ds.rowColCalc_smk" name="rowColCalc_exists"/>
    <testcase time="0" classname="ds.rowColCalc_smk" name="rowColCalc_exists"/>
    <testcase time="0" classname="ds.rowColCalc_smk" name="rowColCalc_exists"/>
  </testsuite>
  <testsuite name="ds.rowColCalc::smk::no newobj" timestamp="2019-08-01 16:55:10" hostname="fv-az670" tests="3" skipped="0" failures="0" errors="0" time="4.34">
    <testcase time="4.34" classname="ds.rowColCalc_smk_no_newobj" name="rowColCalc_out_exists"/>
    <testcase time="0" classname="ds.rowColCalc_smk_no_newobj" name="rowColCalc_out_exists"/>
    <testcase time="0" classname="ds.rowColCalc_smk_no_newobj" name="rowColCalc_out_exists"/>
  </testsuite>
  <testsuite name="ds.rowColCalc::smk::test errors" timestamp="2019-08-01 16:55:15" hostname="fv-az670" tests="3" skipped="0" failures="0" errors="0" time="6.61">
    <testcase time="0" classname="ds.rowColCalc_smk_test_errors" name="rowColCalc_errors"/>
    <testcase time="3.3" classname="ds.rowColCalc_smk_test_errors" name="rowColCalc_errors"/>
    <testcase time="3.31" classname="ds.rowColCalc_smk_test_errors" name="rowColCalc_errors"/>
  </testsuite>
  <testsuite name="ds.subset::smk" timestamp="2019-08-01 16:55:21" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.subset::smk::generate a subset of the assigned table (by default the table is named 'D') with the first 50 observations and the two first columns refered to by their names" timestamp="2019-08-01 16:55:27" hostname="fv-az670" tests="3" skipped="0" failures="0" errors="0" time="8.25">
    <testcase time="8.25" classname="ds.subset_smk_generate_a_subset_of_the_assigned_table_by_default_the_table_is_named_D_with_the_first_50_observations_and_the_two_first_columns_refered_to_by_their_names" name="subD2_exists"/>
    <testcase time="0" classname="ds.subset_smk_generate_a_subset_of_the_assigned_table_by_default_the_table_is_named_D_with_the_first_50_observations_and_the_two_first_columns_refered_to_by_their_names" name="subD2_exists"/>
    <testcase time="0" classname="ds.subset_smk_generate_a_subset_of_the_assigned_table_by_default_the_table_is_named_D_with_the_first_50_observations_and_the_two_first_columns_refered_to_by_their_names" name="subD2_exists"/>
  </testsuite>
  <testsuite name="ds.summary::smk" timestamp="2019-08-01 16:55:29" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.summary::smk::summary of a numerical variable" timestamp="2019-08-01 16:55:36" hostname="fv-az670" tests="3" skipped="0" failures="0" errors="0" time="8.9">
    <testcase time="8.9" classname="ds.summary_smk_summary_of_a_numerical_variable" name="summary_numerical_variable"/>
    <testcase time="0" classname="ds.summary_smk_summary_of_a_numerical_variable" name="summary_numerical_variable"/>
    <testcase time="0" classname="ds.summary_smk_summary_of_a_numerical_variable" name="summary_numerical_variable"/>
  </testsuite>
  <testsuite name="ds.summary::smk::summary of a character variable" timestamp="2019-08-01 16:55:38" hostname="fv-az670" tests="2" skipped="0" failures="0" errors="0" time="2.68">
    <testcase time="2.68" classname="ds.summary_smk_summary_of_a_character_variable" name="summary_character_variable"/>
    <testcase time="0" classname="ds.summary_smk_summary_of_a_character_variable" name="summary_character_variable"/>
  </testsuite>
  <testsuite name="ds.summary::smk::summary of a factor variable" timestamp="2019-08-01 16:55:41" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="1" time="1.39">
    <testcase time="1.39" classname="ds.summary_smk_summary_of_a_factor_variable" name="_unnamed_">
      <error type="error" message="Command 'table1dDS(D$GENDER)' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: table1dDS (@test-smk-ds.summary.R#29)">Command 'table1dDS(D$GENDER)' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: table1dDS
1: ds.summary(x = "D$GENDER") at /home/vsts/work/1/s/tests/testthat/test-smk-ds.summary.R:29
2: opal::datashield.aggregate(datasources[i], as.symbol(paste0("table1dDS(", x, ")"))) at /home/vsts/work/1/s/R/ds.summary.R:111
3: datashield.aggregate.list(datasources[i], as.symbol(paste0("table1dDS(", x, ")")))
4: datashield.command_result(opal, res, wait = TRUE)
5: datashield.command_result.list(opal, res, wait = TRUE)
6: lapply(1:length(opal), function(i) {
       datashield.command_result(opal[[i]], id[[i]], wait = wait)
   })
7: FUN(X[[i]], ...)
8: datashield.command_result(opal[[i]], id[[i]], wait = wait)
9: datashield.command_result.opal(opal[[i]], id[[i]], wait = wait)
10: stop("Command '", cmd$script, "' failed on '", opal$name, "': ", msg, call. = FALSE)</error>
    </testcase>
  </testsuite>
  <testsuite name="ds.table1D::smk" timestamp="2019-08-01 16:55:42" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.table1D::smk::generate a one dimensional table, outputting combined contingency tables" timestamp="2019-08-01 16:55:48" hostname="fv-az670" tests="1" skipped="0" failures="0" errors="1" time="6.7">
    <testcase time="6.7" classname="ds.table1D_smk_generate_a_one_dimensional_table_outputting_combined_contingency_tables" name="_unnamed_">
      <error type="error" message="Command 'table1dDS(D$GENDER)' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: table1dDS (@test-smk-ds.table1D.R#27)">Command 'table1dDS(D$GENDER)' failed on 'sim1': No such DataSHIELD 'AGGREGATE' method with name: table1dDS
1: ds.table1D(x = "D$GENDER") at /home/vsts/work/1/s/tests/testthat/test-smk-ds.table1D.R:27
2: opal::datashield.aggregate(datasources, as.symbol(cally)) at /home/vsts/work/1/s/R/ds.table1D.R:99
3: datashield.aggregate.list(datasources, as.symbol(cally))
4: datashield.command_result(opal, res, wait = TRUE)
5: datashield.command_result.list(opal, res, wait = TRUE)
6: lapply(1:length(opal), function(i) {
       datashield.command_result(opal[[i]], id[[i]], wait = wait)
   })
7: FUN(X[[i]], ...)
8: datashield.command_result(opal[[i]], id[[i]], wait = wait)
9: datashield.command_result.opal(opal[[i]], id[[i]], wait = wait)
10: stop("Command '", cmd$script, "' failed on '", opal$name, "': ", msg, call. = FALSE)</error>
    </testcase>
  </testsuite>
  <testsuite name="ds.table2D::smk" timestamp="2019-08-01 16:55:49" hostname="fv-az670" tests="0" skipped="0" failures="0" errors="0" time="0"/>
  <testsuite name="ds.table2D::smk::generate a two dimensional table, outputting combined contingency tables - default behaviour" timestamp="2019-08-01 16:55:55" hostname="fv-az670" tests="4" skipped="0" failures="3" errors="0" time="6.92">
    <testcase time="6.92" classname="ds.table2D_smk_generate_a_two_dimensional_table_outputting_combined_contingency_tables_default_behaviour" name="DIS_DIAB_GENDER"/>
    <testcase time="0" classname="ds.table2D_smk_generate_a_two_dimensional_table_outputting_combined_contingency_tables_default_behaviour" name="DIS_DIAB_GENDER">
      <failure type="failure" message="res$chi2Test$`pooled-D$DIS_DIAB(row)|D$GENDER(col)`$statistic[[&quot;X-squared&quot;]] not equal to 13.81642. (@test-smk-ds.table2D.R#31)">res$chi2Test$`pooled-D$DIS_DIAB(row)|D$GENDER(col)`$statistic[["X-squared"]] not equal to 13.81642.
target is NULL, current is numeric</failure>
    </testcase>
    <testcase time="0" classname="ds.table2D_smk_generate_a_two_dimensional_table_outputting_combined_contingency_tables_default_behaviour" name="DIS_DIAB_GENDER">
      <failure type="failure" message="res$counts$`pooled-D$DIS_DIAB(row)|D$GENDER(col)`[[1]][[1]] not equal to 4671. (@test-smk-ds.table2D.R#32)">res$counts$`pooled-D$DIS_DIAB(row)|D$GENDER(col)`[[1]][[1]] not equal to 4671.
target is NULL, current is numeric</failure>
    </testcase>
    <testcase time="0" classname="ds.table2D_smk_generate_a_two_dimensional_table_outputting_combined_contingency_tables_default_behaviour" name="DIS_DIAB_GENDER">
      <failure type="failure" message="res$counts$`pooled-D$DIS_DIAB(row)|D$GENDER(col)`[[2]][[2]] not equal to 49. (@test-smk-ds.table2D.R#33)">res$counts$`pooled-D$DIS_DIAB(row)|D$GENDER(col)`[[2]][[2]] not equal to 49.
target is NULL, current is numeric</failure>
    </testcase>
  </testsuite>
  <testsuite name="ds.table2D::smk::generate a two dimensional table, outputting study specific contingency tables" timestamp="2019-08-01 16:55:56" hostname="fv-az670" tests="6" skipped="0" failures="0" errors="0" time="0.89">
    <testcase time="0.89" classname="ds.table2D_smk_generate_a_two_dimensional_table_outputting_study_specific_contingency_tables" name="DIS_DIAB_GENDER_split"/>
    <testcase time="0" classname="ds.table2D_smk_generate_a_two_dimensional_table_outputting_study_specific_contingency_tables" name="DIS_DIAB_GENDER_split"/>
    <testcase time="0" classname="ds.table2D_smk_generate_a_two_dimensional_table_outputting_study_specific_contingency_tables" name="DIS_DIAB_GENDER_split"/>
    <testcase time="0" classname="ds.table2D_smk_generate_a_two_dimensional_table_outputting_study_specific_contingency_tables" name="DIS_DIAB_GENDER_split"/>
    <testcase time="0" classname="ds.table2D_smk_generate_a_two_dimensional_table_outputting_study_specific_contingency_tables" name="DIS_DIAB_GENDER_split"/>
    <testcase time="0" classname="ds.table2D_smk_generate_a_two_dimensional_table_outputting_study_specific_contingency_tables" name="DIS_DIAB_GENDER_split"/>
  </testsuite>
  <testsuite name="ds.table2D::smk::generate a two dimensional table, outputting study specific contingency tables for the first two studies" timestamp="2019-08-01 16:55:57" hostname="fv-az670" tests="6" skipped="0" failures="0" errors="0" time="0.74">
    <testcase time="0.74" classname="ds.table2D_smk_generate_a_two_dimensional_table_outputting_study_specific_contingency_tables_for_the_first_two_studies" name="DIS_DIAB_GENDER_split_12"/>
    <testcase time="0" classname="ds.table2D_smk_generate_a_two_dimensional_table_outputting_study_specific_contingency_tables_for_the_first_two_studies" name="DIS_DIAB_GENDER_split_12"/>
    <testcase time="0" classname="ds.table2D_smk_generate_a_two_dimensional_table_outputting_study_specific_contingency_tables_for_the_first_two_studies" name="DIS_DIAB_GENDER_split_12"/>
    <testcase time="0" classname="ds.table2D_smk_generate_a_two_dimensional_table_outputting_study_specific_contingency_tables_for_the_first_two_studies" name="DIS_DIAB_GENDER_split_12"/>
    <testcase time="0" classname="ds.table2D_smk_generate_a_two_dimensional_table_outputting_study_specific_contingency_tables_for_the_first_two_studies" name="DIS_DIAB_GENDER_split_12"/>
    <testcase time="0" classname="ds.table2D_smk_generate_a_two_dimensional_table_outputting_study_specific_contingency_tables_for_the_first_two_studies" name="DIS_DIAB_GENDER_split_12"/>
  </testsuite>
</testsuites>
